from f_map.c_point import Point


class Node(Point):
    """
    ===========================================================================
     Description: Class of Node in the Map.
    ===========================================================================
    """

    def __init__(self, point=None, x=None, y=None):
        """
        =======================================================================
         Description: Init Node with Idd.
        =======================================================================
         Arguments:
        -----------------------------------------------------------------------
            1. point : Point.
            2. x : int.
            3. y : int.
        =======================================================================
        """
        if point:
            x, y = point.x, point.y
        super().__init__(x, y)
        self.w = 1
        self.father = None
        self.g = 0
        self.h = float('Infinity')
        self.f = float('Infinity')

    def __lt__(self, other):
        """
        =======================================================================
         Description: Return True if Self is less than other Node.
        =======================================================================
         Arguments:
        -----------------------------------------------------------------------
            1. other : Node
        =======================================================================
         Return: bool (True if Self is less than other Node).
        =======================================================================
        """
        if self == other:
            return False
        if self.f < other.f:
            return True
        if self.f == other.f:
            if self.g > other.g:
                return True
            elif self.g == other.g:
                if Point(self.x, self.y) < Point(other.x, other.y):
                    return True
        return False

    def __le__(self, other):
        """
        =======================================================================
         Description: Return True if Self is less or equal to Other.
        =======================================================================
         Arguments:
        -----------------------------------------------------------------------
            1. other : Node
        =======================================================================
         Return: bool
        =======================================================================
        """
        return self.__lt__(other) or self.__eq__(other)

    def __gt__(self, other):
        """
        =======================================================================
         Description: Return True if Self is greater than Other.
        =======================================================================
         Arguments:
        -----------------------------------------------------------------------
            1. other : Node
        =======================================================================
         Return: bool (True if Self is greater than Other).
        =======================================================================
        """
        return not self.__le__(other)

    def __ge__(self, other):
        """
        =======================================================================
         Description: Return True if Self is greater or equal than Other.
        =======================================================================
         Arguments:
        -----------------------------------------------------------------------
            1. other : Node
        =======================================================================
         Return: bool
        =======================================================================
        """
        return not self.__lt__(other)
